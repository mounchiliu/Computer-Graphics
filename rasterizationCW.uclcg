function setup()
{
	UI = {};
	UI.tabs = [];
	UI.titleLong = 'Rasterization Demo';
	UI.titleShort = 'rasterizationDemo';
	UI.numFrames = 1000;
	UI.maxFPS = 24;
	UI.renderWidth = 800;
	UI.renderHeight = 400;

	UI.tabs.push(
		{
		visible: true,
		type: `x-shader/x-fragment`,
		title: `Rasterization`,
		id: `RasterizationDemoFS`,
		initialValue: `#define PROJECTION
#define RASTERIZATION
#define CLIPPING
#define INTERPOLATION
#define ZBUFFERING
#define ANIMATION

precision highp float;
uniform float time;

// Polygon / vertex functionality
const int MAX_VERTEX_COUNT = 8;

uniform ivec2 viewport;

struct Vertex {
    vec3 position;
    vec3 color;
};

struct Polygon {
    // Numbers of vertices, i.e., points in the polygon
    int vertexCount;
    // The vertices themselves
    Vertex vertices[MAX_VERTEX_COUNT];
};

// Appends a vertex to a polygon
void appendVertexToPolygon(inout Polygon polygon, Vertex element) {
    for (int i = 0; i < MAX_VERTEX_COUNT; ++i) {
        if (i == polygon.vertexCount) {
            polygon.vertices[i] = element;
        }
    }
    polygon.vertexCount++;
}

// Copy Polygon source to Polygon destination
void copyPolygon(inout Polygon destination, Polygon source) {
    for (int i = 0; i < MAX_VERTEX_COUNT; ++i) {
        destination.vertices[i] = source.vertices[i];
    }
    destination.vertexCount = source.vertexCount;
}

// Get the i-th vertex from a polygon, but when asking for the one behind the last, get the first again
Vertex getWrappedPolygonVertex(Polygon polygon, int index) {
    if (index >= polygon.vertexCount) index -= polygon.vertexCount;
    for (int i = 0; i < MAX_VERTEX_COUNT; ++i) {
        if (i == index) return polygon.vertices[i];
    }
}

// Creates an empty polygon
void makeEmptyPolygon(out Polygon polygon) {
  polygon.vertexCount = 0;
}

// Clipping part

#define ENTERING 0
#define LEAVING 1
#define OUTSIDE 2
#define INSIDE 3

int getCrossType(Vertex poli1, Vertex poli2, Vertex wind1, Vertex wind2) {
#ifdef CLIPPING
    // Put your code here	
	vec3 windA = vec3(wind1.position[0],wind1.position[1],0);
	vec3 windB = vec3(wind2.position[0],wind2.position[1],0);
	vec3 windAB = windB - windA;
	//find vector AP
	vec3 P1 = vec3(poli1.position[0],poli1.position[1],0);
	vec3 P2 = vec3(poli2.position[0],poli2.position[1],0);
	vec3 AP1 = P1 - windA;
	vec3 AP2 = P2 - windA;
	
	//find cross product
	vec3 crossProduct1 = cross(AP1,windAB);
	vec3 crossProduct2 = cross(AP2,windAB);
	//it should always points to the outside of the screen if point in the polygon
	//it should have the same dir with vec3(0,0,1);
	float insideVertex1 = dot(crossProduct1,vec3(0,0,1));
	float insideVertex2 = dot(crossProduct2,vec3(0,0,1));


	//inside > 0, outside < 0 
	//vertex1 inside, vertex2 outside -> leaving
	if(insideVertex1>0.0&&insideVertex2<0.0)
		return LEAVING;
	//vertex1 inside, vertex2 inside -> inside
	if(insideVertex1>0.0&&insideVertex2>0.0)
		return INSIDE;
	//vertex1 outside, vertex2 inside -> entering
	if(insideVertex1<0.0&&insideVertex2>0.0)
		return ENTERING;
	//vertex1 outside, vertex2 outside -> outside
	if(insideVertex1<0.0&&insideVertex2<0.0)
		return OUTSIDE;
	
#else
    return INSIDE;
#endif
}

// This function assumes that the segments are not parallel or collinear.
Vertex intersect2D(Vertex a, Vertex b, Vertex c, Vertex d) {
#ifdef CLIPPING
    // Put your code here
	// We have two rays which are
	// p1(t) = A + t1(B-A)
	// p2(t) = C + t2(D-C)
	// If two lines intersect with each other we have
	// p1(t) = p2(t)
	
	// B_x - A_x & D_x - C_x
	float BA_x = b.position.x - a.position.x;
	float DC_x = d.position.x - c.position.x;
	// B_y - A_y & D_y - C_y
	float BA_y = b.position.y - a.position.y;
	float DC_y = d.position.y - c.position.y;
	
	//solve
	// A_x + t1(B_x-A_x) = C_x + t2(D_x-C_x)
	// A_y + t1(B_y-A_y) = C_y + t2(D_y-C_y)
	float t1 = ((c.position.x - a.position.x)*DC_y + (a.position.y - c.position.y)*DC_x)/(BA_x*DC_y-BA_y*DC_x);
	// Get intersect point position by using P = A + t1(B-A)
	float x = a.position.x + t1*BA_x;
	float y = a.position.y + t1*BA_y;
	
	// As we know, z_p = d*x_p/u_p 
	// where u_p = u_a + t1*(u_b-u_a) // linear relationship for image plane
	//     x_p = x_a + m*(x_b-x_a)  z_p = z_a + m(z_b - z_a) // linear relationship for camera space
	// then we have z_p = 1/(1/z_a + t1*(1/z_b - 1/z_a))
  	float z = 1.0 / ((1.0/a.position.z) + t1*((1.0/b.position.z)-(1.0/a.position.z)));
	
	vec3 intersection = vec3(x,y,z);
	return Vertex(intersection, vec3(0));
	
	
	
	
#else
    return a;
#endif
}

void sutherlandHodgmanClip(Polygon unclipped, Polygon clipWindow, out Polygon result) {
    Polygon clipped;
    copyPolygon(clipped, unclipped);

    // Loop over the clip window
    for (int i = 0; i < MAX_VERTEX_COUNT; ++i) {
        if (i >= clipWindow.vertexCount) break;

        // Make a temporary copy of the current clipped polygon
        Polygon oldClipped;
        copyPolygon(oldClipped, clipped);

        // Set the clipped polygon to be empty
        makeEmptyPolygon(clipped);

        // Loop over the current clipped polygon
        for (int j = 0; j < MAX_VERTEX_COUNT; ++j) {
            if (j >= oldClipped.vertexCount) break;
            
            // Handle the j-th vertex of the clipped polygon. This should make use of the function 
            // intersect() to be implemented above.
#ifdef CLIPPING
    // Put your code here

			//get two vertices of polygon
			Vertex vertex_j = getWrappedPolygonVertex(oldClipped,j);
			Vertex vertex_j_1 = getWrappedPolygonVertex(oldClipped,j+1);
			//get two vertices of the window
			Vertex windowVertex_i = getWrappedPolygonVertex(clipWindow,i);
			Vertex windowVertex_i_1 = getWrappedPolygonVertex(clipWindow,i+1);
			
			//calculate intersection
			Vertex intersection = intersect2D(vertex_j,vertex_j_1,windowVertex_i,windowVertex_i_1);
			//get cross type
			//ENTERING 0
   		  //LEAVING 1
        //OUTSIDE 2
        //INSIDE 3
			int type = getCrossType(vertex_j, vertex_j_1, windowVertex_i, windowVertex_i_1);
			if(type == ENTERING){
				//update intersection as a vertex
				appendVertexToPolygon(clipped, intersection);
				//update the vertex inside polygon as a vertex in clipped
				appendVertexToPolygon(clipped, vertex_j_1);
			}
			if(type == LEAVING){
				//only update intersection as a vertex
				appendVertexToPolygon(clipped, intersection);
			}		
			if(type == INSIDE){
				//update the second vertex inside polygon as a vertex in clipped
				appendVertexToPolygon(clipped, vertex_j_1);
			}			
			//if outside, do nothing
			
			
			
			
#else
            appendVertexToPolygon(clipped, getWrappedPolygonVertex(oldClipped, j));
#endif
        }
    }

    // Copy the last version to the output
    copyPolygon(result, clipped);
}

// Rasterization and culling part

#define INNER_SIDE 0
#define OUTER_SIDE 1

// Assuming a clockwise (vertex-wise) polygon, returns whether the input point 
// is on the inner or outer side of the edge (ab)
int edge(vec2 point, Vertex a, Vertex b) {
#ifdef RASTERIZATION
    // Put your code here
	/*// Method 1
	// find equation for AB
	// slope
	float k = (b.position[1] - a.position[1])/(b.position[0] - a.position[0]);
	// y = kx + m
	// find m
	float m = a.position[1]-k*a.position[0];
	
	// test point to determine which side P is according to line AB
	float yValue = k*point[0] +m;
	
	// difference
	float diff = yValue - point[1];
	// the polygon is defined in the clockwise direction
	float result = diff*(b.position[0]-a.position[0]);
	
  	if(result > 0.0){
      return INNER_SIDE;
	}*/
	
	//Method 2
	//find vector of AB
	vec3 A = vec3(a.position[0],a.position[1],0);
	vec3 B = vec3(b.position[0],b.position[1],0);
	vec3 AB = B - A;
	//find vector AP
	vec3 AP = vec3(point[0],point[1],0) - A;
	
	//find cross product
	vec3 crossProduct = cross(AP,AB);
	//it should always points to the outside of the screen if point in the polygon
	//it should have the same dir with vec3(0,0,1);
	float result = dot(crossProduct,vec3(0,0,1));
	
	if(result > 0.0){
      return INNER_SIDE;
	}
	
#endif
    return OUTER_SIDE;
}

// Returns if a point is inside a polygon or not
bool isPointInPolygon(vec2 point, Polygon polygon) {
    // Don't evaluate empty polygons
    if (polygon.vertexCount == 0) return false;
    // Check against each edge of the polygon
    bool rasterise = true;
    for (int i = 0; i < MAX_VERTEX_COUNT; ++i) {
        if (i < polygon.vertexCount) {
#ifdef RASTERIZATION
    // Put your code here
    	Vertex vertex_i = getWrappedPolygonVertex(polygon,i);
		 Vertex vertex_i_1 = getWrappedPolygonVertex(polygon,i+1);
  	   if((edge(point, vertex_i ,vertex_i_1) == OUTER_SIDE)){
		   //P should pass the test for every edge
		   rasterise = false;
	   }
                  	
#else
     rasterise = false;
			 
#endif
        }
    }
    return rasterise;
}

bool isPointOnPolygonVertex(vec2 point, Polygon polygon) {
    for (int i = 0; i < MAX_VERTEX_COUNT; ++i) {
        if (i < polygon.vertexCount) {
          	ivec2 pixelDifference = ivec2(abs(polygon.vertices[i].position.xy - point) * vec2(viewport));
          	int pointSize = viewport.x / 200;
            if( pixelDifference.x <= pointSize && pixelDifference.y <= pointSize) {
              return true;
            }
        }
    }
    return false;
}

float triangleArea(vec2 a, vec2 b, vec2 c) {
    // https://en.wikipedia.org/wiki/Heron%27s_formula
    float ab = length(a - b);
    float bc = length(b - c);
    float ca = length(c - a);
    float s = (ab + bc + ca) / 2.0;
    return sqrt(max(0.0, s * (s - ab) * (s - bc) * (s - ca)));
}

Vertex interpolateVertex(vec2 point, Polygon polygon) {
    float weightSum = 0.0;
    vec3 colorSum = vec3(0.0);
    vec3 positionSum = vec3(0.0);
    float depthSum = 0.0;
    for (int i = 0; i < MAX_VERTEX_COUNT; ++i) {
        if (i < polygon.vertexCount) {
#if defined(INTERPOLATION) || defined(ZBUFFERING)
    // Put your code here
			// get three vertices to get a triangle for the use of barycentic coordinates
			Vertex V_A = getWrappedPolygonVertex(polygon,i);
			Vertex V_B = getWrappedPolygonVertex(polygon,i+1);
			Vertex V_C = getWrappedPolygonVertex(polygon,i+2);
			
			vec2 A = vec2(V_A.position.xy);
			vec2 B = vec2(V_B.position.xy);
			vec2 C = vec2(V_C.position.xy);
			
			//Calculate area for each triangle
			float S_PBC = triangleArea(point,B,C);
			//Calculate the weight of the vertex
			float weight = S_PBC;
			
			//Calculate the area for the all polygon
			weightSum += weight;
			
			//color(P) = sum of(each weight of vertex * color of vertex)
			//weight = area of current small triangle / total area;
			//Therefore, color P = 1/total area * (area of current small triangle * color of vertex)
			//Then we can let weightSum to be the total area and variable weight to be area of current small triangle.


#else 
#endif
#ifdef ZBUFFERING
    // Put your code here
			// 1/p.z = (weight1*/a.z + weight2/b.z + weight3/c.z + ...)/totalarea
			depthSum += weight/V_A.position.z;
			
			
#endif
#ifdef INTERPOLATION
    // Put your code here
	  
			//sum up all the weighted value for each vertex
			colorSum += weight*V_A.color;
			//Similarly
			//position(P) = sum of(each weight of vertex * position of vertex) only for x y
			//because in vertex position.z stores the depth info in camera space
			positionSum += weight*vec3(V_A.position.xyz); 
#endif
        }
    }
    //Initialize
    Vertex result = polygon.vertices[0];
  
#ifdef INTERPOLATION
    // Put your code here
	//Update info
	// color P = 1/total area * (area of current small triangle * color of vertex)
	result.color = colorSum/weightSum;
	result.position = positionSum/weightSum;
	//update depth infomation according to
	//p.z = 1/((weight1*/a.z + weight2/b.z + weight3/c.z + ...)/totalarea)
	result.position.z = 1.0/(depthSum/weightSum);
#endif
#ifdef ZBUFFERING
    // Put your code here
#endif
#if !defined(INTERPOLATION) && !defined(ZBUFFERING)
    // Put your code here
#endif

  return result;
}

// Projection part

// Used to generate a projection matrix.
mat4 computeProjectionMatrix() {
    mat4 projectionMatrix = mat4(1);
  
  float aspect = float(viewport.x) / float(viewport.y);  
  float imageDistance = 0.5;

#ifdef PROJECTION
   // Put your code here
   // Initialize as indentity matrix which will not introduce any transformation
	// the first row of the projection Matrix is related to x axis
	// the second row of the projection Matrix is related to y axis
	// the third row of the projection Matrix is related to z axis
	 projectionMatrix[0] = vec4(1,0,0,0); //col 1
	 projectionMatrix[1] = vec4(0,1,0,0); //col 2
	 projectionMatrix[2] = vec4(0,0,1,1); //col 3
	 projectionMatrix[3] = vec4(0,0,0,1); //col 4
	
	 // Add the info of aspect and distance into the matrix
	 projectionMatrix[1][1] *=aspect;
	 projectionMatrix[2][3] = imageDistance;
	
	 return projectionMatrix;
#endif
  
    return projectionMatrix;
}

// Used to generate a simple "look-at" camera. 
mat4 computeViewMatrix(vec3 VRP, vec3 TP, vec3 VUV) {
    mat4 viewMatrix = mat4(1);
	
#ifdef PROJECTION
    // Put your code here
	// Calculate VPN (where the camera points)
	vec3 VPN = TP - VRP;
	

	//find n (the camera is looking down along the z axis)
	vec3 n = normalize(VPN);
	//find u 
	vec3 u = -normalize(cross(n,VUV));
	//find v
	vec3 v = -normalize(cross(u,n));
	//find t
	vec3 t = vec3(-dot(VRP,u),-dot(VRP,v),-dot(VRP,n));
	
	//P' is the point after mapping, P is the original point
	//P' = viewMatrix*P = [x,y,z,1]*[u v n 0] = RP + t;  
	//             			  [t t t 1]
	//col vector u v n form the R matrix
	//first col in glsl
	viewMatrix[0] = vec4(u[0],v[0],n[0],0);
	//second col
	viewMatrix[1] = vec4(u[1],v[1],n[1],0);
	//third col
	viewMatrix[2] = vec4(u[2],v[2],n[2],0);
	//fourth col
	viewMatrix[3] = vec4(t[0],t[1],t[2],1);
	
	return viewMatrix;
#endif
    return viewMatrix;
}

vec3 getCameraPosition() {  
#ifdef ANIMATION
    // Put your code here
	 return vec3(10.0*cos(time), 0, 10.0*sin(time));
#else
    return vec3(0, 0, 10);
#endif
}

// Takes a single input vertex and projects it using the input view and projection matrices
vec3 projectVertexPosition(vec3 position) {

  // Set the parameters for the look-at camera.
    vec3 TP = vec3(0, 0, 0);
  	vec3 VRP = getCameraPosition();
    vec3 VUV = vec3(0, 1, 0);
  
    // Compute the view matrix.
    mat4 viewMatrix = computeViewMatrix(VRP, TP, VUV);

  // Compute the projection matrix.
    mat4 projectionMatrix = computeProjectionMatrix();
  
#ifdef PROJECTION
    // Put your code here
	// position in homogeneous form
	vec4 p = vec4(position,1);
	//first model the object from the world to the camera coordinate system
	//then model it to the image plane by projection matrix
	p = projectionMatrix*viewMatrix*p;
	
	//normalize to make sure the fourth element (w) of the coordinate = 1
	p = p/p[3];
	
	//update position
	position = vec3(p[0],p[1],p[2]);
	return position;
#else
    return position;
#endif
}

// Projects all the vertices of a polygon
void projectPolygon(inout Polygon projectedPolygon, Polygon polygon) {
    copyPolygon(projectedPolygon, polygon);
    for (int i = 0; i < MAX_VERTEX_COUNT; ++i) {
        if (i < polygon.vertexCount) {
            projectedPolygon.vertices[i].position = projectVertexPosition(polygon.vertices[i].position);
        }
    }
}

// Draws a polygon by projecting, clipping, ratserizing and interpolating it
void drawPolygon(
  vec2 point, 
  Polygon clipWindow, 
  Polygon oldPolygon, 
  inout vec3 color, 
  inout float depth)
{
    Polygon projectedPolygon;
    projectPolygon(projectedPolygon, oldPolygon);  
  
    Polygon clippedPolygon;
    sutherlandHodgmanClip(projectedPolygon, clipWindow, clippedPolygon);

    if (isPointInPolygon(point, clippedPolygon)) {
      
        Vertex interpolatedVertex = 
          interpolateVertex(point, projectedPolygon);
#if defined(ZBUFFERING)    
    // Put your code here
		//find the vertex with smaller depth and update the color
		if (depth > interpolatedVertex.position.z){
		 color = interpolatedVertex.color;
      depth = interpolatedVertex.position.z; 
		}
		
#else
      // Put your code to handle z buffering here
      color = interpolatedVertex.color;
      depth = interpolatedVertex.position.z;      
#endif
   }
  
   if (isPointOnPolygonVertex(point, clippedPolygon)) {
        color = vec3(1);
   }
}

// Main function calls

void drawScene(vec2 pixelCoord, inout vec3 color) {
    color = vec3(0.3, 0.3, 0.3);
  
  	// Convert from GL pixel coordinates 0..N-1 to our screen coordinates -1..1
    vec2 point = 2.0 * pixelCoord / vec2(viewport) - vec2(1.0);

    Polygon clipWindow;
    clipWindow.vertices[0].position = vec3(-0.65,  0.95, 1.0);
    clipWindow.vertices[1].position = vec3( 0.65,  0.75, 1.0);
    clipWindow.vertices[2].position = vec3( 0.75, -0.65, 1.0);
    clipWindow.vertices[3].position = vec3(-0.75, -0.85, 1.0);
    clipWindow.vertexCount = 4;
  
  	// Draw the area outside the clip region to be dark
    color = isPointInPolygon(point, clipWindow) ? vec3(0.5) : color;

    const int triangleCount = 2;
    Polygon triangles[triangleCount];
  
    triangles[0].vertices[0].position = vec3(-2, -2, 0.0);
    triangles[0].vertices[1].position = vec3(4, 0, 3.0);
    triangles[0].vertices[2].position = vec3(-1, 2, 0.0);
    triangles[0].vertices[0].color = vec3(1.0, 0.5, 0.2);
    triangles[0].vertices[1].color = vec3(0.8, 0.8, 0.8);
    triangles[0].vertices[2].color = vec3(0.2, 0.5, 1.0);
    triangles[0].vertexCount = 3;
  
    triangles[1].vertices[0].position = vec3(3.0, 2.0, -2.0);
  	triangles[1].vertices[2].position = vec3(0.0, -2.0, 3.0);
    triangles[1].vertices[1].position = vec3(-1.0, 2.0, 4.0);
    triangles[1].vertices[1].color = vec3(0.2, 1.0, 0.1);
    triangles[1].vertices[2].color = vec3(1.0, 1.0, 1.0);
    triangles[1].vertices[0].color = vec3(0.1, 0.2, 1.0);
    triangles[1].vertexCount = 3;

    float depth = 10000.0;
    // Project and draw all the triangles
    for (int i = 0; i < triangleCount; i++) {
        drawPolygon(point, clipWindow, triangles[i], color, depth);
    }   
}

void main() {
    drawScene(gl_FragCoord.xy, gl_FragColor.rgb);
    gl_FragColor.a = 1.0;
}`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	UI.tabs.push(
		{
		visible: false,
		type: `x-shader/x-vertex`,
		title: `RasterizationDemoTextureVS - GL`,
		id: `RasterizationDemoTextureVS`,
		initialValue: `attribute vec3 position;
    attribute vec2 textureCoord;

    uniform mat4 modelViewMatrix;
    uniform mat4 projectionMatrix;

    varying highp vec2 vTextureCoord;
  
    void main(void) {
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        vTextureCoord = textureCoord;
    }
`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	UI.tabs.push(
		{
		visible: false,
		type: `x-shader/x-vertex`,
		title: `RasterizationDemoVS - GL`,
		id: `RasterizationDemoVS`,
		initialValue: `attribute vec3 position;

    uniform mat4 modelViewMatrix;
    uniform mat4 projectionMatrix;

    void main(void) {
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }
`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	UI.tabs.push(
		{
		visible: false,
		type: `x-shader/x-fragment`,
		title: `RasterizationDemoTextureFS - GL`,
		id: `RasterizationDemoTextureFS`,
		initialValue: `
        varying highp vec2 vTextureCoord;

        uniform sampler2D uSampler;

        void main(void) {
            gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));
        }
`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	 return UI; 
}//!setup

var gl;
function initGL(canvas) {
    try {
        gl = canvas.getContext("webgl");
        gl.viewportWidth = canvas.width;
        gl.viewportHeight = canvas.height;
    } catch (e) {
    }
    if (!gl) {
        alert("Could not initialise WebGL, sorry :-(");
    }
}

function evalJS(id) {
    var jsScript = document.getElementById(id);
    eval(jsScript.innerHTML);
}

function getShader(gl, id) {
    var shaderScript = document.getElementById(id);
    if (!shaderScript) {
        return null;
    }

    var str = "";
    var k = shaderScript.firstChild;
    while (k) {
        if (k.nodeType == 3) {
            str += k.textContent;
        }
        k = k.nextSibling;
    }

    var shader;
    if (shaderScript.type == "x-shader/x-fragment") {
        shader = gl.createShader(gl.FRAGMENT_SHADER);
    } else if (shaderScript.type == "x-shader/x-vertex") {
        shader = gl.createShader(gl.VERTEX_SHADER);
    } else {
        return null;
    }

    gl.shaderSource(shader, str);
    gl.compileShader(shader);

    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        alert(gl.getShaderInfoLog(shader));
        return null;
    }

    return shader;
}

function RasterizationDemo() {
}

RasterizationDemo.prototype.initShaders = function() {

    this.shaderProgram = gl.createProgram();

    gl.attachShader(this.shaderProgram, getShader(gl, "RasterizationDemoVS"));
    gl.attachShader(this.shaderProgram, getShader(gl, "RasterizationDemoFS"));
    gl.linkProgram(this.shaderProgram);

    if (!gl.getProgramParameter(this.shaderProgram, gl.LINK_STATUS)) {
        alert("Could not initialise shaders");
    }

    gl.useProgram(this.shaderProgram);

    this.shaderProgram.vertexPositionAttribute = gl.getAttribLocation(this.shaderProgram, "position");
    gl.enableVertexAttribArray(this.shaderProgram.vertexPositionAttribute);

    this.shaderProgram.projectionMatrixUniform = gl.getUniformLocation(this.shaderProgram, "projectionMatrix");
    this.shaderProgram.modelviewMatrixUniform = gl.getUniformLocation(this.shaderProgram, "modelViewMatrix");
}

RasterizationDemo.prototype.initTextureShaders = function() {

    this.textureShaderProgram = gl.createProgram();

    gl.attachShader(this.textureShaderProgram, getShader(gl, "RasterizationDemoTextureVS"));
    gl.attachShader(this.textureShaderProgram, getShader(gl, "RasterizationDemoTextureFS"));
    gl.linkProgram(this.textureShaderProgram);

    if (!gl.getProgramParameter(this.textureShaderProgram, gl.LINK_STATUS)) {
        alert("Could not initialise shaders");
    }

    gl.useProgram(this.textureShaderProgram);

    this.textureShaderProgram.vertexPositionAttribute = gl.getAttribLocation(this.textureShaderProgram, "position");
    gl.enableVertexAttribArray(this.textureShaderProgram.vertexPositionAttribute);

    this.textureShaderProgram.textureCoordAttribute = gl.getAttribLocation(this.textureShaderProgram, "textureCoord");
    gl.enableVertexAttribArray(this.textureShaderProgram.textureCoordAttribute);
    //gl.vertexAttribPointer(this.textureShaderProgram.textureCoordAttribute, 2, gl.FLOAT, false, 0, 0);

    this.textureShaderProgram.projectionMatrixUniform = gl.getUniformLocation(this.textureShaderProgram, "projectionMatrix");
    this.textureShaderProgram.modelviewMatrixUniform = gl.getUniformLocation(this.textureShaderProgram, "modelViewMatrix");
}

RasterizationDemo.prototype.initBuffers = function() {
    this.triangleVertexPositionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, this.triangleVertexPositionBuffer);
    
    var vertices = [
         -1.0,  -1.0,  0.0,
         -1.0,   1.0,  0.0,
          1.0,   1.0,  0.0,

         -1.0,  -1.0,  0.0,
          1.0,  -1.0,  0.0,
          1.0,   1.0,  0.0,
     ];
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
    this.triangleVertexPositionBuffer.itemSize = 3;
    this.triangleVertexPositionBuffer.numItems = 3 * 2;

    this.textureCoordBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, this.textureCoordBuffer);

    var textureCoords = [
        0.0,  0.0,
        0.0,  1.0,
        1.0,  1.0,

        0.0,  0.0,
        1.0,  0.0,
        1.0,  1.0
    ];
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);
    this.textureCoordBuffer.itemSize = 2;
}

function getTime() {  
	var d = new Date();
	return d.getMinutes() * 60.0 + d.getSeconds() + d.getMilliseconds() / 1000.0;
}


RasterizationDemo.prototype.initTextureFramebuffer = function() {
    // create off-screen framebuffer
    this.framebuffer = gl.createFramebuffer();
    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
    this.framebuffer.width = this.prerender_width;
    this.framebuffer.height = this.prerender_height;

    // create RGB texture
    this.framebufferTexture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, this.framebufferTexture);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.framebuffer.width, this.framebuffer.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);//LINEAR_MIPMAP_NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    //gl.generateMipmap(gl.TEXTURE_2D);

    // create depth buffer
    this.renderbuffer = gl.createRenderbuffer();
    gl.bindRenderbuffer(gl.RENDERBUFFER, this.renderbuffer);
    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.framebuffer.width, this.framebuffer.height);

    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.framebufferTexture, 0);
    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.renderbuffer);

    // reset state
    gl.bindTexture(gl.TEXTURE_2D, null);
    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
}

RasterizationDemo.prototype.drawScene = function() {
            
    gl.bindFramebuffer(gl.FRAMEBUFFER, env.framebuffer);
    gl.useProgram(this.shaderProgram);
    gl.viewport(0, 0, this.prerender_width, this.prerender_height);
    gl.clear(gl.COLOR_BUFFER_BIT);

        var perspectiveMatrix = new J3DIMatrix4();  
        perspectiveMatrix.setUniform(gl, this.shaderProgram.projectionMatrixUniform, false);

        var modelViewMatrix = new J3DIMatrix4();    
        modelViewMatrix.setUniform(gl, this.shaderProgram.modelviewMatrixUniform, false);

        gl.uniform2iv(gl.getUniformLocation(this.shaderProgram, "viewport"), [getRenderTargetWidth(), getRenderTargetHeight()]);
            
		gl.uniform1f(gl.getUniformLocation(this.shaderProgram, "time"), getTime());  

        gl.bindBuffer(gl.ARRAY_BUFFER, this.triangleVertexPositionBuffer);
        gl.vertexAttribPointer(this.shaderProgram.vertexPositionAttribute, this.triangleVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, this.textureCoordBuffer);
        gl.vertexAttribPointer(this.textureShaderProgram.textureCoordAttribute, this.textureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);
        
        gl.drawArrays(gl.TRIANGLES, 0, this.triangleVertexPositionBuffer.numItems);

    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.useProgram(this.textureShaderProgram);
    gl.viewport(0, 0, this.render_width, this.render_height);
    gl.clear(gl.COLOR_BUFFER_BIT);

        var perspectiveMatrix = new J3DIMatrix4();  
        perspectiveMatrix.setUniform(gl, this.textureShaderProgram.projectionMatrixUniform, false);

        var modelViewMatrix = new J3DIMatrix4();    
        modelViewMatrix.setUniform(gl, this.textureShaderProgram.modelviewMatrixUniform, false);

        gl.bindTexture(gl.TEXTURE_2D, this.framebufferTexture);
        gl.uniform1i(gl.getUniformLocation(this.textureShaderProgram, "uSampler"), 0);
            
        gl.bindBuffer(gl.ARRAY_BUFFER, this.triangleVertexPositionBuffer);
        gl.vertexAttribPointer(this.textureShaderProgram.vertexPositionAttribute, this.triangleVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, this.textureCoordBuffer);
        gl.vertexAttribPointer(this.textureShaderProgram.textureCoordAttribute, this.textureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);
        
        gl.drawArrays(gl.TRIANGLES, 0, this.triangleVertexPositionBuffer.numItems);
}

RasterizationDemo.prototype.run = function() {

    this.render_width     = 800;
    this.render_height    = 400;

    this.prerender_width  = this.render_width;
    this.prerender_height = this.render_height;

    this.initTextureFramebuffer();
    this.initShaders();
    this.initTextureShaders();
    this.initBuffers();
};

function init() {   
    env = new RasterizationDemo();

    return env;
}

function compute(canvas)
{
    env.run();
    env.drawScene();
}

