function setup()
{
	UI = {};
	UI.tabs = [];
	UI.titleLong = 'Ray Tracer';
	UI.titleShort = 'RayTracerSimple';
	UI.numFrames = 1000;
	UI.maxFPS = 24;
	UI.renderWidth = 800;
	UI.renderHeight = 400;

	UI.tabs.push(
		{
		visible: true,
		type: `x-shader/x-fragment`,
		title: `RaytracingDemoFS - GL`,
		id: `RaytracingDemoFS`,
		initialValue: `#define SOLUTION_CYLINDER_AND_PLANE
#define SOLUTION_MATERIAL
#define SOLUTION_SHADOW
#define SOLUTION_REFLECTION_REFRACTION
#define SOLUTION_FRESNEL

precision highp float;
uniform float time;

struct PointLight {
    vec3 position;
    vec3 color;
};

struct Material {
    vec3  diffuse;
    vec3  specular;
    float glossiness;
#ifdef SOLUTION_MATERIAL
	// Put the variables for reflection and refraction here
	//Weight for each materials
	float reflectiveness;
	float refractiveness;
	//refraction index for each Material
	float refractionIndex;
		

#endif
};

struct Sphere {
    vec3 position;
    float radius;
    Material material;
};

struct Plane {
    vec3 normal;
    float d;
    Material material;
};

struct Cylinder {
    vec3 position;
    vec3 direction;  
    float radius;
    Material material;
};

const int lightCount = 2;
const int sphereCount = 3;
const int planeCount = 1;
const int cylinderCount = 2;

struct Scene {
    vec3 ambient;
    PointLight[lightCount] lights;
    Sphere[sphereCount] spheres;
    Plane[planeCount] planes;
    Cylinder[cylinderCount] cylinders;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

// Contains all information pertaining to a ray/object intersection
struct HitInfo {
    bool hit;
    float t;
    vec3 position;
    vec3 normal;
    Material material;
};

HitInfo getEmptyHit() {
	return HitInfo(
      	false, 
      	0.0, 
      	vec3(0.0), 
      	vec3(0.0), 
#ifdef SOLUTION_MATERIAL
		// Update the constructor call
		Material(vec3(0.0), vec3(0.0), 0.0, 0.0, 0.0, 0.0)
#else
		Material(vec3(0.0), vec3(0.0), 0.0)
#endif
	);
}

// Sorts the two t values such that t1 is smaller than t2
void sortT(inout float t1, inout float t2) {
  	// Make t1 the smaller t
    if (t2 < t1) {
		float temp = t1;
		t1 = t2;
		t2 = temp;
    }
}

// Tests if t is in an interval
bool isTInInterval(const float t, const float tMin, const float tMax) {
	return t > tMin && t < tMax;
}

// Get the smallest t in an interval
bool getSmallestTInInterval(float t0, float t1, const float tMin, const float tMax, inout float smallestTInInterval) {
	sortT(t0, t1);
	// As t0 is smaller, test this first
	if (isTInInterval(t0, tMin, tMax)) {
		smallestTInInterval = t0;
        return true;
	}
  
	// If t0 was not in the interval, still t1 could be
	if (isTInInterval(t1, tMin, tMax)) {
		smallestTInInterval = t1;
		return true;
	}  
	// None was
	return false;
}

HitInfo intersectSphere(const Ray ray, const Sphere sphere, const float tMin, const float tMax) {
              
    vec3 to_sphere = ray.origin - sphere.position;
 
    float a = dot(ray.direction, ray.direction);
	float b = 2.0 * dot(ray.direction, to_sphere);
    float c = dot(to_sphere, to_sphere) - sphere.radius * sphere.radius;
    float D = b * b - 4.0 * a * c;
    if (D > 0.0)
    {
		float t0 = (-b - sqrt(D)) / (2.0 * a);
		float t1 = (-b + sqrt(D)) / (2.0 * a);
      
      	float smallestTInInterval;
      	if (!getSmallestTInInterval(t0, t1, tMin, tMax, smallestTInInterval)) {
			return getEmptyHit();
        }
      
      	vec3 hitPosition = ray.origin + smallestTInInterval * ray.direction;      

      	vec3 normal = 
			length(ray.origin - sphere.position) < sphere.radius + 0.001 ? 
          	-normalize(hitPosition - sphere.position) : 
      		normalize(hitPosition - sphere.position);      

        return HitInfo(
          	true,
          	smallestTInInterval,
          	hitPosition,
          	normal,
          	sphere.material
        );
    }
    return getEmptyHit();
}

HitInfo intersectPlane(const Ray ray,const Plane plane, const float tMin, const float tMax) {
#ifdef SOLUTION_CYLINDER_AND_PLANE
	// Add your plane intersection code here
	// Q1
	// check whether ray is normal to the plane
	// Equation for plane: n·P + d, where n = (a,b,c) P = (x,y,z) , d is the distance of the plane from the origin point
	// Equation for one point P' on the Ray: r0 + td' = P', where r0 is the origin of the ray, d' is the direction of the ray
	// If there is an intersection, then ax+by+cz = (a,b,c)·(x,y,z) = n·(r0+td')+d = n·r0 + tn·d' + d = 0
	// t = -(n·r0+d)/(n·d')
	
	float ray_dot_normal = dot(ray.direction,plane.normal);//denominator
	
	if(ray_dot_normal != 0.0){
		float t = -(plane.d + (dot(ray.origin,plane.normal)))/ray_dot_normal;
				
		//check t
		float smallestTInInterval;
      	if (!getSmallestTInInterval(t, t, tMin, tMax, smallestTInInterval)) {
			return getEmptyHit();
        }

		vec3 hitPosition = ray.origin + t * ray.direction;		
		vec3 normal = plane.normal;

		return HitInfo(
        true,
        t,
        hitPosition,
        normal,
        plane.material
        );	
	}
	return getEmptyHit();
#endif  
    return getEmptyHit(); 

}

float lengthSquared(vec3 x) {
	return dot(x, x);
}

HitInfo intersectCylinder(const Ray ray, const Cylinder cylinder, const float tMin, const float tMax) {
	// Add your cylinder intersection code here
	#ifdef SOLUTION_CYLINDER_AND_PLANE
	// Q1
	// Equation for one point P' on the Ray: r0 + td' = P', where r0 is the origin of the ray, d' is the direction of the ray
	// Set vector rC = r0 - C0
	// Set vector v = P - C0, where P is the hit position of the ray and the cylinder, C0 is the position of the cylinder
	// If P is on the ray, v = r0+td'-C0 = rC+td'
	// Therefore, v-h = r, where r is the radius of the cylinder, h = (v·n)n 
	// Equation for the cylinder is (v-h)^2 = r^2 -> (v-(v·n)n)^2 = r^2
	// If there is an intersection, then (rC+td'-((rC+td')·n)n)^2 = r^2 -> at^2 + 2bt + c = 0
	// if b^2 - ac > 0, the ray intersects the cylinder
    vec3 to_cylinder = ray.origin - cylinder.position;
	
    float a = dot(ray.direction - dot(ray.direction,cylinder.direction)*cylinder.direction,
				 ray.direction - dot(ray.direction,cylinder.direction)*cylinder.direction);
	float b = 2.0 * dot(ray.direction - dot(ray.direction,cylinder.direction)*cylinder.direction,
						to_cylinder-dot(to_cylinder,cylinder.direction)*cylinder.direction);
    float c = dot(to_cylinder-dot(to_cylinder,cylinder.direction)*cylinder.direction,
				 to_cylinder-dot(to_cylinder,cylinder.direction)*cylinder.direction) - cylinder.radius * cylinder.radius;
    float D = b * b - 4.0 * a * c;
    if (D > 0.0)
    {
		float t0 = (-b - sqrt(D)) / (2.0 * a);
		float t1 = (-b + sqrt(D)) / (2.0 * a);
      
      	float smallestTInInterval;
      	if (!getSmallestTInInterval(t0, t1, tMin, tMax, smallestTInInterval)) {
			return getEmptyHit();
        }
      
      	vec3 hitPosition = ray.origin + smallestTInInterval * ray.direction;      

		vec3 vecInDir = dot(hitPosition-cylinder.position,cylinder.direction)*cylinder.direction;
		vec3 positionOfvecInDir = cylinder.position + vecInDir;
      	vec3 normal = normalize(hitPosition - positionOfvecInDir);
		
		// If the origin of the ray is inside the object -> Ray in the object
		if(dot(-ray.direction,normal)<0.0)
			normal = -normal;
		

        return HitInfo(
          	true,
          	smallestTInInterval,
          	hitPosition,
          	normal,
          	cylinder.material
        );
    }
    return getEmptyHit();
	#endif  
    return getEmptyHit();
	
}

HitInfo getBetterHitInfo(const HitInfo oldHitInfo, const HitInfo newHitInfo) {
	if(newHitInfo.hit)
  		if(newHitInfo.t < oldHitInfo.t)  // No need to test for the interval, this has to be done per-primitive
          return newHitInfo;
  	return oldHitInfo;
}

HitInfo intersectScene(const Scene scene, const Ray ray, const float tMin, const float tMax) {
	HitInfo bestHitInfo;
	bestHitInfo.t = tMax;
	bestHitInfo.hit = false;
	for (int i = 0; i < cylinderCount; ++i) {
    	bestHitInfo = getBetterHitInfo(bestHitInfo, intersectCylinder(ray, scene.cylinders[i], tMin, tMax));
	}
	for (int i = 0; i < sphereCount; ++i) {
		bestHitInfo = getBetterHitInfo(bestHitInfo, intersectSphere(ray, scene.spheres[i], tMin, tMax));
	}
	for (int i = 0; i < planeCount; ++i) {
		bestHitInfo = getBetterHitInfo(bestHitInfo, intersectPlane(ray, scene.planes[i], tMin, tMax));
	}
  
	return bestHitInfo;
}

vec3 shadeFromLight(
	const Scene scene,
	const Ray ray,
	const HitInfo hit_info,
	const PointLight light)
{ 
	vec3 hitToLight = light.position - hit_info.position;
  
	vec3 lightDirection = normalize(hitToLight);
	vec3 viewDirection = normalize(hit_info.position - ray.origin);
	vec3 reflectedDirection = reflect(viewDirection, hit_info.normal);
	float diffuse_term = max(0.0, dot(lightDirection, hit_info.normal));
	float specular_term  = pow(max(0.0, dot(lightDirection, reflectedDirection)), hit_info.material.glossiness);

#ifdef SOLUTION_SHADOW
	// Put your shadow test here
	
	// Q3
	// check whether the ray of the light is intersected with objs
	float visibility = 1.0;
	Ray lightRay;
	lightRay.origin = hit_info.position;
	lightRay.direction = lightDirection;
	// if there is shadow, the defined ray will intersect the object
	// Note:
	// direction = normalize(hitToLight) = (light_P - hit_P0)/length(light_P - hit_P0);
	// t = 0, P = hit_P0; t = length(light_P - hit_P0), P = light_P
	// Therefore, we should have a limitation on the maximum of tmax
	HitInfo lightHitInfo = intersectScene(scene, lightRay, 0.001, length(hitToLight));

	if(lightHitInfo.hit) //If there still a valid hit point, v = 0;
		visibility = 0.0; //shadow
	 
  
#else
  	float visibility = 1.0;
#endif
  
	Ray mirrorRay;
	mirrorRay.origin = hit_info.position;
	mirrorRay.direction = reflect(lightDirection, hit_info.normal);
	HitInfo mirrorHitInfo = intersectScene(scene, mirrorRay, 0.001, 100000.0);
     
  return visibility * 
		 light.color * (
		 specular_term * hit_info.material.specular +
		 diffuse_term * hit_info.material.diffuse
		 );
}

vec3 background(const Ray ray) {
	// A simple implicit sky that can be used for the background
	return vec3(0.2) + vec3(0.8, 0.6, 0.5) * max(0.0, ray.direction.y);
}

// It seems to be a WebGL issue that the third parameter needs to be inout instea dof const on Tobias' machine
vec3 shade(const Scene scene, const Ray ray, inout HitInfo hitInfo) {

  	if(!hitInfo.hit) {
		return background(ray);
  	}
  
    vec3 shading = scene.ambient * hitInfo.material.diffuse;
    for (int i = 0; i < lightCount; ++i) {
		shading += shadeFromLight(scene, ray, hitInfo, scene.lights[i]); 
    }
    return shading;
}


Ray getFragCoordRay(const vec2 frag_coord) {
	float sensorDistance = 1.0;
  	vec2 sensorMin = vec2(-1, -0.5);
  	vec2 sensorMax = vec2(1, 0.5);
  	vec2 pixelSize = (sensorMax- sensorMin) / vec2(800, 400);
  	vec3 origin = vec3(0, 0, sensorDistance);
    vec3 direction = normalize(vec3(sensorMin + pixelSize * frag_coord, -sensorDistance));  
  
  	return Ray(origin, direction);
}

float fresnel(const vec3 viewDirection, const vec3 normal, const float n1, const float n2) {
#ifdef SOLUTION_FRESNEL
	// Put your code to compute the Fresnel effect here
	// Transparent objects such as glass are both reflective and refractive
	// How much light it reflects depends on the angle of incidence
	// Here, theta is the angle between the direction from which the incident light is coming and the normal of the interface between the two media
	// R0 is the probability of reflection when theta = 0
	// R0 = [n1-n2)/(n1+n2)]^2
	float R0 = pow((n1-n2)/(n1+n2),2.0);
	
	float costheta = dot(-viewDirection,normal); 
	
	// this gives probability of reflection
	return (R0 + (1.0-R0)*pow((1.0-costheta),3.0));
#else
	return 1.0;
#endif
}

// Calculate refelction direction
vec3 reflectDir(const vec3 viewDirection, const vec3 normal){    
	//r = viewDirection + 2(<normal,-viewDirection>)n
	return normalize(viewDirection + 2.0*dot(normal,-viewDirection)*normal);
}

// Calculate refraction direction
vec3 refractDir(const vec3 viewDirection, const vec3 normal, const float ratioIndex){

	vec3 e = -viewDirection;
	float cosValue = dot(e,normal);
	// calculate the root
	float root = 1.0 + pow(ratioIndex,2.0)*(pow(cosValue,2.0)-1.0);
	if(root<0.0)// internal reflection
		return reflectDir(viewDirection,normal);
	else
		return (-ratioIndex*e + normal*(ratioIndex*cosValue-sqrt(root)));
}

vec3 colorForFragment(const Scene scene, const vec2 fragCoord) {
      
    Ray initialRay = getFragCoordRay(fragCoord);  
  	HitInfo initialHitInfo = intersectScene(scene, initialRay, 0.001, 10000.0);  
  	vec3 result = shade(scene, initialRay, initialHitInfo);
	
  	Ray currentRay;
  	HitInfo currentHitInfo;
  	
  	// Compute the reflection
  	currentRay = initialRay;
  	currentHitInfo = initialHitInfo;
  	
  	// The initial strength of the reflection
  	float reflectionWeight = 1.0;
  	
  	const int maxReflectionStepCount = 2;
  	for (int i = 0; i < maxReflectionStepCount; i++) {
		if (!currentHitInfo.hit) break;
      
#ifdef SOLUTION_REFLECTION_REFRACTION
		// Put your reflection weighting code here 
		// Q4 
		// reflection weight will be smaller for later steps (reflection becomes fainter)
		reflectionWeight *= currentHitInfo.material.reflectiveness;
#endif
		
#ifdef SOLUTION_FRESNEL
		// Add Fresnel contribution
		// use fresnel to compute the probability of reflection and times it with previous calculated reflection weight
		reflectionWeight*= fresnel(currentRay.direction,currentHitInfo.normal,1.0,currentHitInfo.material.refractionIndex);
#else
		reflectionWeight *= 0.5;
#endif
      
		Ray nextRay;
#ifdef SOLUTION_REFLECTION_REFRACTION
		// Put your code to compute the reflection ray here
		//Q4
		//origin is the hit point of the current ray
		nextRay.origin = currentHitInfo.position;
		//calculate direction by using reflectDir function (function defined by myself)
		nextRay.direction = reflectDir(currentRay.direction,currentHitInfo.normal);
		
#endif
		currentRay = nextRay; 
		currentHitInfo = intersectScene(scene, currentRay, 0.001, 10000.0);             
		result += reflectionWeight * shade(scene, currentRay, currentHitInfo);
    }
  
	// Compute the refraction
	currentRay = initialRay;  
	currentHitInfo = initialHitInfo;
   
  	// The initial medium is air
  	float currentIOR = 1.0;

  	// The initial strength of the refraction.
  	float refractionWeight = 1.0;
  
  	const int maxRefractionStepCount = 2;
  	for(int i = 0; i < maxRefractionStepCount; i++) {
      
#ifdef SOLUTION_REFLECTION_REFRACTION
		// Put your refraction weighting code here  
		// Q4 
		// refraction weight will be smaller for later steps (refraction becomes fainter)
		refractionWeight *= currentHitInfo.material.refractiveness;
			
			
#else
		refractionWeight *= 0.5;      
#endif
		
		
#ifdef SOLUTION_FRESNEL
		// Add Fresnel contribution		
		// probability of refraction = 1 - probability of reflection
		refractionWeight *= (1.0-fresnel(currentRay.direction,currentHitInfo.normal,1.0,currentHitInfo.material.refractionIndex));
#endif      

		Ray nextRay;
#ifdef SOLUTION_REFLECTION_REFRACTION      
		// Put your code to compute the reflection ray and track the IOR
		// Q4
		// origin is the hit point of the current ray
		nextRay.origin = currentHitInfo.position;
		// calculate direction by using refract function
		// refractDir(incident vector,normal vector,ratio of indices of refraction) // function defined by myself
		// snell's law
		nextRay.direction = refractDir(currentRay.direction,currentHitInfo.normal,currentIOR/currentHitInfo.material.refractionIndex);
		
		currentRay = nextRay;
		
#endif
      
		currentHitInfo = intersectScene(scene, currentRay, 0.001, 10000.0);   		
		result += refractionWeight * shade(scene, currentRay, currentHitInfo);
      
		if (!currentHitInfo.hit) break;
	}
	return result;
}

Material getDefaultMaterial() {
#ifdef SOLUTION_MATERIAL
	// Update the default material call to match the new parameters of Material
	return Material(vec3(0.3), vec3(0), 1.0, 0.0, 0.0,0.0);
#else
	return Material(vec3(0.3), vec3(0), 1.0);
#endif
}

Material getPaperMaterial() {
#ifdef SOLUTION_MATERIAL
	// Replace by your definition of a paper material
	// Q2
	// The paper is set as white 
	// The paper diffuses most of lights 
	float kd = 0.8;
	vec3 diffuse_color = vec3(1,1,1);
	// The paper has almost no specular light
	float ks = 0.01;
	vec3 specular_color = vec3(0,0,0);
	float gloss = 0.01;

	vec3 diffuse = kd*diffuse_color ;
	vec3 specular = ks*specular_color;
	
	// Paper does not reflect lights.
	float reflectiveness = 0.0;
	// For non-transparent object, the refractiveness is zero.
	float refractiveness = 0.0;
	
	float refractionIndex = 0.0;
	
	// return Material(diffuse, specular, gloss,reflection,refraction);
	return Material(diffuse, specular, gloss,reflectiveness,refractiveness,refractionIndex);
	
#else
    return getDefaultMaterial();
#endif
}

Material getPlasticMaterial() {
#ifdef SOLUTION_MATERIAL
	// Replace by your definition of a plastic material
	// Q2
	// The color of diffuse light is set as orange
	// The orange plastic material has some diffuse light and specular light
	float kd = 0.5;
	vec3 diffuse_color = vec3(1,0.2,0);
	float ks = 0.9;
	vec3 specular_color = vec3(1,1,1);
	// gloss is the power of the light(shiness)
	float gloss = 10.0;
	
	vec3 diffuse = kd*diffuse_color ;
	vec3 specular = ks*specular_color;
	
	// The orange plastic reflects some of the light and refracts some of the light
	float reflectiveness = 0.3;
	float refractiveness = 0.2;
	
	// refraction index of plastic should be greater than 1
	float refractionIndex = 1.5;
	
	return Material(diffuse, specular, gloss,reflectiveness,refractiveness,refractionIndex);

#else
  	return getDefaultMaterial();
#endif
}

Material getGlassMaterial() {
#ifdef SOLUTION_MATERIAL
	// Replace by your definition of a glass material
	// Q2
	// For totally transparent object, there is no diffuse light and specular light at all
	float kd = 0.0;
	vec3 diffuse_color = vec3(0,0,0);
	float ks = 0.0;
	vec3 specular_color = vec3(0,0,0);
	float gloss = 0.01;
	
	vec3 diffuse = kd*diffuse_color;
	vec3 specular = ks*specular_color;
	
	// The glass can reflect some of the light and refracts almost all incoming lights.
	float reflectiveness = 0.5;
	float refractiveness = 1.0;
	
	// refraction index of plastic should be greater than 1
	float refractionIndex = 1.2;
	
	return Material(diffuse, specular, gloss,reflectiveness,refractiveness,refractionIndex);
	
#else
	return getDefaultMaterial();
#endif
}

Material getSteelMirrorMaterial() {
#ifdef SOLUTION_MATERIAL
	// Replace by your definition of a steel mirror material
	// Q3
	// Steel can have some diffuse light and tiny specular light
	float kd = 0.7;
	vec3 diffuse_color = vec3(0.2,0.2,0.2);
	float ks = 0.1;
	vec3 specular_color = vec3(1,1,1);
	float gloss = 10.0;
	
	vec3 diffuse = kd*diffuse_color ;
	vec3 specular = ks*specular_color;
	
	// Steel reflects most of the incoming lights
	float reflectiveness = 0.7;
	// For non-transparent object, the refractiveness is zero.
	float refractiveness = 0.0;
	
	float refractionIndex = 0.0;
	
	return Material(diffuse, specular, gloss,reflectiveness,refractiveness,refractionIndex);
	
#else
	return getDefaultMaterial();
#endif
}

vec3 tonemap(const vec3 radiance) {
	const float monitorGamma = 2.0;
	return pow(radiance, vec3(1.0 / monitorGamma));
}

void main()
{
    // Setup scene
	Scene scene;
  	scene.ambient = vec3(0.12, 0.15, 0.2);
  
    // Lights
    scene.lights[0].position = vec3(5, 15, -5);
    scene.lights[0].color    = 0.5 * vec3(0.9, 0.5, 0.1);
    
  	scene.lights[1].position = vec3(-15, 5, 2);
    scene.lights[1].color    = 0.5 * vec3(0.1, 0.3, 1.0);
  
    // Primitives
    scene.spheres[0].position            	= vec3(10, -5, -16);
    scene.spheres[0].radius              	= 6.0;
    scene.spheres[0].material 				= getPaperMaterial();
    
  	scene.spheres[1].position            	= vec3(-7, -1, -13);
    scene.spheres[1].radius             	= 4.0;
    scene.spheres[1].material				= getPlasticMaterial();
  
    scene.spheres[2].position            	= vec3(0, 0.5, -5);
    scene.spheres[2].radius              	= 2.0;
    scene.spheres[2].material   			= getGlassMaterial();

  	scene.planes[0].normal            		= vec3(0, 1, 0);
    scene.planes[0].d              			= 4.5;
    scene.planes[0].material				= getSteelMirrorMaterial();
  
  	scene.cylinders[0].position            	= vec3(-1, 1, -18);
  	scene.cylinders[0].direction            = normalize(vec3(-1, 2, -1));
  	scene.cylinders[0].radius         		= 1.5;
    scene.cylinders[0].material				= getPaperMaterial();
  
  	scene.cylinders[1].position            	= vec3(4, 1, -5);
  	scene.cylinders[1].direction            = normalize(vec3(1, 4, 1));
  	scene.cylinders[1].radius         		= 0.4;
    scene.cylinders[1].material				= getPlasticMaterial();

	// compute color for fragment
	gl_FragColor.rgb = tonemap(colorForFragment(scene, gl_FragCoord.xy));
	gl_FragColor.a = 1.0;

}
`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	UI.tabs.push(
		{
		visible: false,
		type: `x-shader/x-vertex`,
		title: `RaytracingDemoVS - GL`,
		id: `RaytracingDemoVS`,
		initialValue: `attribute vec3 position;
    uniform mat4 modelViewMatrix;
    uniform mat4 projectionMatrix;
  
    void main(void) {
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }
`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	 return UI; 
}//!setup

var gl;
function initGL(canvas) {
	try {
		gl = canvas.getContext("experimental-webgl");
		gl.viewportWidth = canvas.width;
		gl.viewportHeight = canvas.height;
	} catch (e) {
	}
	if (!gl) {
		alert("Could not initialise WebGL, sorry :-(");
	}
}

function getShader(gl, id) {
	var shaderScript = document.getElementById(id);
	if (!shaderScript) {
		return null;
	}

	var str = "";
	var k = shaderScript.firstChild;
	while (k) {
		if (k.nodeType == 3) {
			str += k.textContent;
		}
		k = k.nextSibling;
	}

	var shader;
	if (shaderScript.type == "x-shader/x-fragment") {
		shader = gl.createShader(gl.FRAGMENT_SHADER);
	} else if (shaderScript.type == "x-shader/x-vertex") {
		shader = gl.createShader(gl.VERTEX_SHADER);
	} else {
		return null;
	}

    console.log(str);
	gl.shaderSource(shader, str);
	gl.compileShader(shader);

	if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
		alert(gl.getShaderInfoLog(shader));
		return null;
	}

	return shader;
}

function RaytracingDemo() {
}

RaytracingDemo.prototype.initShaders = function() {

	this.shaderProgram = gl.createProgram();

	gl.attachShader(this.shaderProgram, getShader(gl, "RaytracingDemoVS"));
	gl.attachShader(this.shaderProgram, getShader(gl, "RaytracingDemoFS"));
	gl.linkProgram(this.shaderProgram);

	if (!gl.getProgramParameter(this.shaderProgram, gl.LINK_STATUS)) {
		alert("Could not initialise shaders");
	}

	gl.useProgram(this.shaderProgram);

	this.shaderProgram.vertexPositionAttribute = gl.getAttribLocation(this.shaderProgram, "position");
	gl.enableVertexAttribArray(this.shaderProgram.vertexPositionAttribute);

	this.shaderProgram.projectionMatrixUniform = gl.getUniformLocation(this.shaderProgram, "projectionMatrix");
	this.shaderProgram.modelviewMatrixUniform = gl.getUniformLocation(this.shaderProgram, "modelViewMatrix");
}

RaytracingDemo.prototype.initBuffers = function() {
	this.triangleVertexPositionBuffer = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, this.triangleVertexPositionBuffer);
	
	var vertices = [
		 -1,  -1,  0,
		 -1,  1,  0,
		 1,  1,  0,

		 -1,  -1,  0,
		 1,  -1,  0,
		 1,  1,  0,
	 ];
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
	this.triangleVertexPositionBuffer.itemSize = 3;
	this.triangleVertexPositionBuffer.numItems = 3 * 2;
}

function getTime() {
	var d = new Date();
	return d.getMinutes() * 60.0 + d.getSeconds() + d.getMilliseconds() / 1000.0;
}

RaytracingDemo.prototype.drawScene = function() {
			
	var perspectiveMatrix = new J3DIMatrix4();	
	perspectiveMatrix.setUniform(gl, this.shaderProgram.projectionMatrixUniform, false);

	var modelViewMatrix = new J3DIMatrix4();	
	modelViewMatrix.setUniform(gl, this.shaderProgram.modelviewMatrixUniform, false);

	gl.uniform1f(gl.getUniformLocation(this.shaderProgram, "time"), getTime());
		
	gl.bindBuffer(gl.ARRAY_BUFFER, this.triangleVertexPositionBuffer);
	gl.vertexAttribPointer(this.shaderProgram.vertexPositionAttribute, this.triangleVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
	
	gl.drawArrays(gl.TRIANGLES, 0, this.triangleVertexPositionBuffer.numItems);
}

RaytracingDemo.prototype.run = function() {
	this.initShaders();
	this.initBuffers();

	gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
	gl.clear(gl.COLOR_BUFFER_BIT);

	this.drawScene();
};

function init() {	
	

	env = new RaytracingDemo();	
	env.run();

    return env;
}

function compute(canvas)
{
    env.initShaders();
    env.initBuffers();

    gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
    gl.clear(gl.COLOR_BUFFER_BIT);

    env.drawScene();
}
